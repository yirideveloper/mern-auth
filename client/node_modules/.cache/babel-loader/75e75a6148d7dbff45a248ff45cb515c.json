{"ast":null,"code":"import http from \"../services/httpService\";\nimport { handleSuccess, handleError } from \"../utils/api\"; // AUTH\n\nexport var postLogin = function postLogin(user) {\n  return http.post(\"/auth/login\", user).then(handleSuccess);\n};\nexport var sendResetPasswordLink = function sendResetPasswordLink(email) {\n  return http.post(\"auth/login/forgot\", {\n    email: email\n  }).then(handleSuccess).catch(handleError);\n};\nexport var resetPassword = function resetPassword(password, token) {\n  return http.post(\"auth/login/reset/\".concat(token), {\n    password: password\n  }).then(handleSuccess).catch(handleError);\n};\nexport var postLogout = function postLogout() {\n  return http.post(\"/auth/logout\").then(handleSuccess).catch(handleError);\n};\nexport var postRegister = function postRegister(user) {\n  return http.post(\"/auth/register\", user).then(handleSuccess);\n};\nexport var getConfirmation = function getConfirmation(token) {\n  return http.get(\"/auth/confirmation/\".concat(token)).then(handleSuccess).catch(handleError);\n};\nexport var resendConfirmation = function resendConfirmation(email) {\n  return http.post(\"/auth/resend\", {\n    email: email\n  }).then(handleSuccess).catch(handleError);\n};\nexport var resetRegister = function resetRegister(email) {\n  return http.post(\"/auth/register/reset\", {\n    email: email\n  }).then(handleSuccess).catch(handleError);\n}; // User - DO NOT PUT HANDLING SUCCESS - It's always success : gives user or empty object. It's needed to trigger the update user in thunks.\n\nexport var getUser = function getUser() {\n  return http.get(\"/user\").catch(handleError);\n};","map":{"version":3,"sources":["/home/flav/Projects/Update/mern-authentification/client/src/api/index.js"],"names":["http","handleSuccess","handleError","postLogin","user","post","then","sendResetPasswordLink","email","catch","resetPassword","password","token","postLogout","postRegister","getConfirmation","get","resendConfirmation","resetRegister","getUser"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,yBAAjB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,cAA3C,C,CACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAC3BJ,IAAI,CAACK,IAAL,CAAU,aAAV,EAAyBD,IAAzB,EAA+BE,IAA/B,CAAoCL,aAApC,CAD2B;AAAA,CAAtB;AAGP,OAAO,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,KAAK;AAAA,SACxCR,IAAI,CACDK,IADH,CACQ,mBADR,EAC6B;AAAEG,IAAAA,KAAK,EAALA;AAAF,GAD7B,EAEGF,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CADwC;AAAA,CAAnC;AAMP,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,KAAX;AAAA,SAC3BZ,IAAI,CACDK,IADH,4BAC4BO,KAD5B,GACqC;AAAED,IAAAA,QAAQ,EAARA;AAAF,GADrC,EAEGL,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CAD2B;AAAA,CAAtB;AAMP,OAAO,IAAMW,UAAU,GAAG,SAAbA,UAAa;AAAA,SACxBb,IAAI,CACDK,IADH,CACQ,cADR,EAEGC,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CADwB;AAAA,CAAnB;AAMP,OAAO,IAAMY,YAAY,GAAG,SAAfA,YAAe,CAAAV,IAAI;AAAA,SAC9BJ,IAAI,CAACK,IAAL,CAAU,gBAAV,EAA4BD,IAA5B,EAAkCE,IAAlC,CAAuCL,aAAvC,CAD8B;AAAA,CAAzB;AAGP,OAAO,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAH,KAAK;AAAA,SAClCZ,IAAI,CACDgB,GADH,8BAC6BJ,KAD7B,GAEGN,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CADkC;AAAA,CAA7B;AAMP,OAAO,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAT,KAAK;AAAA,SACrCR,IAAI,CACDK,IADH,CACQ,cADR,EACwB;AAAEG,IAAAA,KAAK,EAALA;AAAF,GADxB,EAEGF,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CADqC;AAAA,CAAhC;AAMP,OAAO,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,CAAAV,KAAK;AAAA,SAChCR,IAAI,CACDK,IADH,CACQ,sBADR,EACgC;AAAEG,IAAAA,KAAK,EAALA;AAAF,GADhC,EAEGF,IAFH,CAEQL,aAFR,EAGGQ,KAHH,CAGSP,WAHT,CADgC;AAAA,CAA3B,C,CAMP;;AACA,OAAO,IAAMiB,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAMnB,IAAI,CAACgB,GAAL,CAAS,OAAT,EAAkBP,KAAlB,CAAwBP,WAAxB,CAAN;AAAA,CAAhB","sourcesContent":["import http from \"../services/httpService\";\nimport { handleSuccess, handleError } from \"../utils/api\";\n// AUTH\nexport const postLogin = user =>\n  http.post(\"/auth/login\", user).then(handleSuccess);\n\nexport const sendResetPasswordLink = email =>\n  http\n    .post(\"auth/login/forgot\", { email })\n    .then(handleSuccess)\n    .catch(handleError);\n\nexport const resetPassword = (password, token) =>\n  http\n    .post(`auth/login/reset/${token}`, { password })\n    .then(handleSuccess)\n    .catch(handleError);\n\nexport const postLogout = () =>\n  http\n    .post(\"/auth/logout\")\n    .then(handleSuccess)\n    .catch(handleError);\n\nexport const postRegister = user =>\n  http.post(\"/auth/register\", user).then(handleSuccess);\n\nexport const getConfirmation = token =>\n  http\n    .get(`/auth/confirmation/${token}`)\n    .then(handleSuccess)\n    .catch(handleError);\n\nexport const resendConfirmation = email =>\n  http\n    .post(\"/auth/resend\", { email })\n    .then(handleSuccess)\n    .catch(handleError);\n\nexport const resetRegister = email =>\n  http\n    .post(\"/auth/register/reset\", { email })\n    .then(handleSuccess)\n    .catch(handleError);\n\n// User - DO NOT PUT HANDLING SUCCESS - It's always success : gives user or empty object. It's needed to trigger the update user in thunks.\nexport const getUser = () => http.get(\"/user\").catch(handleError);\n"]},"metadata":{},"sourceType":"module"}